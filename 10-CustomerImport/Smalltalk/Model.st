Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'initialization' stamp: 'BrianBokser 11/23/2017 13:37'!initializeWithStreetName: aStreetName withStreetNumber: aStreetNumber withTown: aTown withZipCode: aZipCode withProvince: aProvince	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTown.	zipCode := aZipCode.	province := aProvince! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/23/2017 13:34'!withStreetName: aStreetName withStreetNumber: aStreetNumber withTown: aTown withZipCode: aZipCode withProvince: aProvince	^ self new initializeWithStreetName: aStreetName withStreetNumber: aStreetNumber withTown: aTown withZipCode: aZipCode withProvince: aProvince.! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!commitTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!beginTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!start	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!stop	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'CosmeFulanito 11/16/2017 19:17'!addCustomer: aCustomer	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/20/2017 19:02'!customerIdentifiedAs: anIdentification ifNotOne: aNotOneBlock	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 20:35'!allCustomers	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'BrianBokser 11/18/2017 20:35'!customersIsEmpty	^ self allCustomers isEmpty! !!CustomerSystem methodsFor: 'customers' stamp: 'BrianBokser 11/18/2017 20:35'!customersSize	^ self allCustomers size! !Object subclass: #ERPSystem	instanceVariableNames: 'customerSystem supplierSystem'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ERPSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 17:00'!beginTransaction	customerSystem beginTransaction.	supplierSystem beginTransaction.! !!ERPSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 17:00'!suppliersIsEmpty	^ supplierSystem suppliersIsEmpty .! !!ERPSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:56'!start	customerSystem start.	supplierSystem start.! !!ERPSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/22/2017 23:58'!customersIsEmpty	^ customerSystem customersIsEmpty! !!ERPSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/22/2017 23:59'!customersSize	^ customerSystem customersSize! !!ERPSystem methodsFor: 'initialize' stamp: 'BrianBokser 11/20/2017 11:11'!initializeWith: aCustomerSystem with: aSupplierSystem 	customerSystem := aCustomerSystem.	supplierSystem := aSupplierSystem.! !!ERPSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/20/2017 17:00'!commitTransaction	customerSystem commitTransaction.	supplierSystem commitTransaction.! !!ERPSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/22/2017 23:52'!stop	customerSystem stop.	supplierSystem stop.! !!ERPSystem methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 19:11'!customerIdentifiedAs: anIdentification ifNotOne: aNotOneBlock 	^ customerSystem customerIdentifiedAs: anIdentification ifNotOne: aNotOneBlock.! !!ERPSystem methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 11:30'!addCustomer: aCustomer 	customerSystem addCustomer: aCustomer.! !!ERPSystem methodsFor: 'suppliers' stamp: 'BrianBokser 11/20/2017 17:36'!supplierIdentifiedAs: anIdentification ifNotOne: aNotOneBlock 	^ supplierSystem supplierIdentifiedAs: anIdentification  ifNotOne: aNotOneBlock .! !!ERPSystem methodsFor: 'Suppliers' stamp: 'BrianBokser 11/20/2017 11:12'!addSupplier: aSupplier 	^ supplierSystem addSupplier: aSupplier.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ERPSystem class	instanceVariableNames: ''!!ERPSystem class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 11:08'!with: aCustomerSystem with: aSupplierSystem^ self new initializeWith: aCustomerSystem with: aSupplierSystem.! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Environment methodsFor: 'test - system' stamp: 'BrianBokser 11/20/2017 12:09'!newERPSystem	| anERPSystem |	anERPSystem := ERPSystem		with:			self newCustomerSystem		with:			self newSupplierSystem.	^ anERPSystem! !!Environment methodsFor: 'system-create' stamp: 'BrianBokser 11/18/2017 22:51'!newSupplierSystem	self subclassResponsibility.! !!Environment methodsFor: 'instance creation' stamp: 'BrianBokser 11/16/2017 12:03'!newCustomerSystem	self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'accessing' stamp: 'BrianBokser 11/16/2017 12:05'!current	| currentEnvironmentClass |	currentEnvironmentClass := Environment allSubclasses detect: [ :anEnvirommentClass | anEnvirommentClass isCurrent  ] ifNone: [ Error signal: 'No current Environment' ].	^ currentEnvironmentClass new.! !!Environment class methodsFor: 'accessing' stamp: 'BrianBokser 11/20/2017 16:09'!isCurrent	self subclassResponsibility.! !Environment subclass: #DevelopmentEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!DevelopmentEnviroment methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/16/2017 12:00'!newCustomerSystem	^ TransientCustomerSystem new.! !!DevelopmentEnviroment methodsFor: 'system-create' stamp: 'BrianBokser 11/18/2017 22:51'!newSupplierSystem	 ^ TransientSupplierSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnviroment class	instanceVariableNames: ''!!DevelopmentEnviroment class methodsFor: 'testing' stamp: 'BrianBokser 11/23/2017 13:25'!isCurrent	^ false.! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!IntegrationEnvironment methodsFor: 'instance creation' stamp: 'BrianBokser 11/23/2017 13:44'!newCustomerSystem	^ PersistentCustomerSystem withPersistanceMapper: PersistanceMapper new.! !!IntegrationEnvironment methodsFor: 'instance creation' stamp: 'BrianBokser 11/23/2017 13:47'!newSupplierSystem	^ PersistentSupplierSystem withPersistanceMapper: PersistanceMapper new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'BrianBokser 11/23/2017 13:25'!isCurrent	^ true.! !Object subclass: #Party	instanceVariableNames: 'addresses identification'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Party methodsFor: 'accessing' stamp: 'BrianBokser 11/20/2017 18:41'!identificationNumber	^ identification idNumber.! !!Party methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 18:40'!initialize	addresses := OrderedCollection new.! !!Party methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 18:40'!isIdentifiedAs: anIdentification	^ identification = anIdentification! !!Party methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 18:44'!addressesIsEmpty		^addresses isEmpty! !!Party methodsFor: 'accesing' stamp: 'BrianBokser 11/20/2017 18:40'!identificationType	^ identification idType ! !!Party methodsFor: 'accesing' stamp: 'ivanpondal 11/23/2017 02:37'!identification	^ identification copy! !!Party methodsFor: 'addresses' stamp: 'BrianBokser 11/20/2017 18:44'!numberOfAddresses		^addresses size! !!Party methodsFor: 'addresses' stamp: 'BrianBokser 11/20/2017 18:41'!addAddress: anAddress 	addresses add: anAddress.! !!Party methodsFor: 'address' stamp: 'BrianBokser 11/20/2017 18:41'!addressAt: aStreetName ifNone: noneClosure 	^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Party methodsFor: 'address' stamp: 'BrianBokser 11/20/2017 18:47'!addresses	^ addresses copy.! !Party subclass: #Customer	instanceVariableNames: 'id firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 22:17'!initializeWithFirstName: aFirstName withLastName: aLastName identifiedAs: anIdentification	super initialize.	firstName := aFirstName.	lastName := aLastName.	identification := anIdentification.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'importing - private - customer' stamp: 'BrianBokser 11/20/2017 22:16'!withFirstName: aFirstName withLastName: aLastName identifiedAs: anIdentification.	^ self new initializeWithFirstName: aFirstName withLastName: aLastName identifiedAs: anIdentification.! !Object subclass: #PartyIdentification	instanceVariableNames: 'idNumber idType'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PartyIdentification methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 17:17'!initializeOfType: anIdentificationType numbered: anIdentificationNumber 	idType := anIdentificationType.	idNumber := anIdentificationNumber.! !!PartyIdentification methodsFor: 'comparing' stamp: 'BrianBokser 11/20/2017 17:18'!= anIdentification	idType = anIdentification idType  ifFalse: [ ^ false ].	idNumber = anIdentification idNumber  ifFalse: [ ^ false ].	^ true.! !!PartyIdentification methodsFor: 'comparing' stamp: 'BrianBokser 11/20/2017 17:19'!idType	^ idType! !!PartyIdentification methodsFor: 'comparing' stamp: 'BrianBokser 11/20/2017 17:19'!idNumber	^ idNumber! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PartyIdentification class	instanceVariableNames: ''!!PartyIdentification class methodsFor: 'creation' stamp: 'BrianBokser 11/20/2017 17:14'!ofType: anIdentificationType numbered: anIdentificationNumber 	^ self new initializeOfType: anIdentificationType numbered: anIdentificationNumber.! !TestCase subclass: #PartyImportTest	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PartyImportTest methodsFor: 'importing' stamp: 'ivanpondal 11/22/2017 23:54'!importFrom: inputStream	(PartyImporter from: inputStream on: system) import! !!PartyImportTest methodsFor: 'tests' stamp: 'ivanpondal 11/22/2017 23:53'!setUp	system := Environment current newERPSystem.	system start.	system beginTransaction.! !!PartyImportTest methodsFor: 'tests' stamp: 'ivanpondal 11/22/2017 23:52'!tearDown	system commitTransaction.	system stop.! !!PartyImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/23/2017 13:41'!assert: aParty hasAddressAt: aStreetName number: aStreetNumber in: aTown zipCode: aZipCode province: aProvince	| aSupplierAddress |		aSupplierAddress := aParty addressAt: aStreetName ifNone: [ self fail ].	self assert: aSupplierAddress streetName equals: aStreetName.	self assert: aSupplierAddress streetNumber equals: aStreetNumber.	self assert: aSupplierAddress town equals: aTown.	self assert: aSupplierAddress zipCode equals: aZipCode.	self assert: aSupplierAddress province equals: aProvince.	! !PartyImportTest subclass: #CustomerImportTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'BrianBokser 11/20/2017 22:22'!assertJuanPerezWasImportedCorrectly	| customer anIdentification |	anIdentification := PartyIdentification		ofType: 'C'		numbered: '23-25666777-9'.	customer := system		customerIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: 'C'		withNumber: '23-25666777-9'		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'BrianBokser 11/18/2017 20:34'!assertImportedCustomersSizeIsCorrect	self assert: system customersSize equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'BrianBokser 11/20/2017 22:22'!assertPepeSanchezWasImportedCorrectly	| customer anIdentification |	anIdentification := PartyIdentification ofType: 'D' numbered: '22333444'.	customer := system		customerIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: 'D'		withNumber: '22333444'		andNumberOfAddresses: 2.	self		assert: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: RecordImporter invalidRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: PartyImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: RecordImporter invalidRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testCanNotImportAddressWithoutCustomer	self		should: [ self importFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: RecordImporter thereIsNoMainPartyForRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: PartyImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals:  RecordImporter invalidRecordErrorDescription .			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testImportCustomers	self importFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: PartyImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'ivanpondal 11/22/2017 23:54'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: RecordImporter invalidRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'BrianBokser 11/20/2017 22:22'!alwaysImportedCustomer	| anIdentification |	anIdentification := PartyIdentification		ofType: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber.	^ system		customerIdentifiedAs: anIdentification		ifNotOne: [ self fail ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !Object subclass: #PartyImporter	instanceVariableNames: 'line readStream session record newCustomer newSupplier mainParty'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PartyImporter methodsFor: 'importing - private' stamp: 'BrianBokser 11/20/2017 20:09'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!PartyImporter methodsFor: 'importing - private' stamp: 'BrianBokser 11/20/2017 20:09'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!PartyImporter methodsFor: 'importing - private' stamp: 'BrianBokser 11/20/2017 20:09'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!PartyImporter methodsFor: 'importing - private' stamp: 'BrianBokser 11/20/2017 22:03'!importRecord 	| aRecordImporter |	self assertRecordNotEmpty.	RecordImporter allSubclasses detect: [ :aRecordImporterClass | aRecordImporterClass canImportRecord: record ] 	ifFound: [ :aRecordImporterClass | 		aRecordImporter := aRecordImporterClass for: mainParty on: session.		mainParty := aRecordImporter import: record. 		^ mainParty.]	ifNone: [^ self signalInvalidRecordType.] .! !!PartyImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:09'!initializeOn: aReadStream on: aSupplierSystem	readStream := aReadStream.	session := aSupplierSystem.! !!PartyImporter methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 20:33'!assertInputIsNotEmpty	readStream isEmpty ifTrue: [ Error signal: self class emptyInputErrorDescription ].! !!PartyImporter methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 20:34'!import	self assertInputIsNotEmpty.		self canImportNextLine.	self convertLineToRecord.	mainParty := self importRecord. 	[self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ].! !!PartyImporter methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 20:09'!parseRecord	record := line substrings: {$,}! !!PartyImporter methodsFor: 'error signal' stamp: 'BrianBokser 11/20/2017 20:09'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!PartyImporter methodsFor: 'importing - private - address' stamp: 'BrianBokser 11/20/2017 20:09'!assertThereIsSupplierForRecord	newSupplier isNil ifTrue: [ self signalNoSupplierForRecordError ].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PartyImporter class	instanceVariableNames: ''!!PartyImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 20:09'!from: aReadStream on: aSupplierSystem	^self new initializeOn: aReadStream on: aSupplierSystem! !!PartyImporter class methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 20:09'!recordStartsWithInvalidCharacterErrorMessage	^ 'Record starts with invalid character'! !!PartyImporter class methodsFor: 'error descriptions' stamp: 'BrianBokser 11/20/2017 20:09'!invalidRecordTypeErrorDescription		^'Invalid record type'! !Object subclass: #PersistanceMapper	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistanceMapper methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:49'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identification)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistanceMapper methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:52'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistanceMapper methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:55'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identification)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session persistanceMapper'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'BrianBokser 11/23/2017 13:51'!initializeWithPersistanceMapper: aPersistanceMapper 	persistanceMapper := aPersistanceMapper.	self initializeSession.! !!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/23/2017 02:19'!addCustomer: aCustomer 	session persist: aCustomer! !!PersistentCustomerSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 20:35'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:16'!commitTransaction	session commit! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:15'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:15'!start	session open! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:49'!customerMapping	^ persistanceMapper customerMapping! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:52'!addressMapping	^ persistanceMapper addressMapping! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/23/2017 02:18'!stop	session close! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/23/2017 01:57'!initializeSession	session :=			(DataBaseSession				for: (Array with: self addressMapping with: self customerMapping))! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 19:01'!customerIdentifiedAs: anIdentification ifNotOne: aNotOneBlock	| customers |	customers := session		select: [ :aCustomer | 			aCustomer isIdentifiedAs: anIdentification ]		ofType: Customer.	(customers size = 1) ifFalse: aNotOneBlock.	^ customers anyOne! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersistentCustomerSystem class	instanceVariableNames: ''!!PersistentCustomerSystem class methodsFor: 'creation' stamp: 'BrianBokser 11/23/2017 13:46'!withPersistanceMapper: aPersistanceMapper 	^ self new initializeWithPersistanceMapper: aPersistanceMapper.! !Object subclass: #RecordImporter	instanceVariableNames: 'mainParty system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!RecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:26'!initializeFor: aMainParty on: aSystem	mainParty := aMainParty.	system := aSystem.! !!RecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:35'!import: aRecord	self subclassResponsibility.! !!RecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 21:59'!assertValidRecordSize: aRecord	(aRecord size = self recordSize) ifFalse: [ Error signal: self class invalidRecordErrorDescription ].! !!RecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:54'!recordSize	self subclassResponsibility.! !!RecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 21:58'!assertThereIsMainPartyForRecord	mainParty ifNil: [ Error signal: self class thereIsNoMainPartyForRecordErrorDescription ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RecordImporter class	instanceVariableNames: ''!!RecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 20:42'!canImportRecord: aRecord	self subclassResponsibility.! !!RecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 20:26'!for: aMainParty on: aSystem	^ self new initializeFor: aMainParty on: aSystem.	! !!RecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 21:59'!invalidRecordErrorDescription	^ 'Invalid Record'.! !!RecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 22:01'!thereIsNoMainPartyForRecordErrorDescription	^ 'There is no main party for record'.! !RecordImporter subclass: #AddressRecordImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!AddressRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:45'!recordSize	^ 6.! !!AddressRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/23/2017 13:35'!import: aRecord	| anAddress |	self assertValidRecordSize: aRecord.	self assertThereIsMainPartyForRecord.	anAddress := Address		withStreetName: aRecord second		withStreetNumber: aRecord third asInteger		withTown: aRecord fourth		withZipCode: aRecord fifth asInteger		withProvince: aRecord sixth.	mainParty addAddress: anAddress.	^ mainParty! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AddressRecordImporter class	instanceVariableNames: ''!!AddressRecordImporter class methodsFor: 'testing' stamp: 'BrianBokser 11/20/2017 20:42'!canImportRecord: aRecord	^ aRecord first = 'A'	.! !RecordImporter subclass: #CustomerRecordImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 21:40'!recordSize	^ 5.! !!CustomerRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 22:22'!import: aRecord	| aCustomer anIdentification |	self assertValidRecordSize: aRecord.	anIdentification := PartyIdentification		ofType: aRecord fourth		numbered: aRecord fifth.	aCustomer := Customer		withFirstName: aRecord second		withLastName: aRecord third		identifiedAs: anIdentification.	system addCustomer: aCustomer.	^ aCustomer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerRecordImporter class	instanceVariableNames: ''!!CustomerRecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 21:38'!canImportRecord: aRecord	^ aRecord first = 'C'.! !RecordImporter subclass: #ExistingCustomerRecordImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ExistingCustomerRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:56'!recordSize	^ 3.! !!ExistingCustomerRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 22:22'!import: aRecord	| anIdentification anExistingCustomer |		self assertValidRecordSize: aRecord.	self assertThereIsMainPartyForRecord.	anIdentification := PartyIdentification ofType: aRecord second numbered: aRecord third. 	anExistingCustomer := system customerIdentifiedAs: anIdentification ifNotOne: [ self signalNonExisingCustomer ].	mainParty addCustomer: anExistingCustomer.	^ mainParty.! !!ExistingCustomerRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:57'!signalNonExisingCustomer 	^ Error signal: self class nonExistingCustomerErrorMessage.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ExistingCustomerRecordImporter class	instanceVariableNames: ''!!ExistingCustomerRecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 20:54'!canImportRecord: aRecord	^ aRecord first = 'EC'! !!ExistingCustomerRecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 20:57'!nonExistingCustomerErrorMessage	^ 'Non existing customer'.! !RecordImporter subclass: #NewCustomerRecordImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!NewCustomerRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 21:34'!recordSize	^ 5.! !!NewCustomerRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 22:22'!import: aRecord	| aCustomer anIdentification |	self assertValidRecordSize: aRecord.	self assertThereIsMainPartyForRecord.	anIdentification := PartyIdentification		ofType: aRecord fourth		numbered: aRecord fifth.	aCustomer := Customer		withFirstName: aRecord second		withLastName: aRecord third		identifiedAs: anIdentification.	system addCustomer: aCustomer.	mainParty addCustomer: aCustomer.	^ mainParty! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewCustomerRecordImporter class	instanceVariableNames: ''!!NewCustomerRecordImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 21:30'!canImportRecord: aRecord	^ aRecord first = 'NC'! !Party subclass: #Supplier	instanceVariableNames: 'id name customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'evaluating' stamp: 'CosmeFulanito 11/16/2017 20:39'!name	^ name! !!Supplier methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 11:35'!addCustomer: aCustomer 	customers add: aCustomer.! !!Supplier methodsFor: 'customers' stamp: 'ivanpondal 11/23/2017 02:37'!hasCustomer: aCustomer 	customers detect: [ :aSupplierCustomer | aSupplierCustomer isIdentifiedAs: aCustomer identification ] 	ifNone: [^ false ].	^ true.! !!Supplier methodsFor: 'initialize' stamp: 'BrianBokser 11/20/2017 18:42'!initializeWithName: aName withIdentication: anIdentification	super initialize.	name := aName.	identification := anIdentification.	customers := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Supplier class	instanceVariableNames: ''!!Supplier class methodsFor: 'initialize' stamp: 'BrianBokser 11/20/2017 22:22'!withName: aName withIdenticationType: anIdentificationType withIdentificationNumber: anIdentificationNumber 	| anIdentification |	anIdentification := PartyIdentification ofType: anIdentificationType  numbered: anIdentificationNumber. 	^ self new initializeWithName: aName withIdentication: anIdentification.! !PartyImportTest subclass: #SupplierImportTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImportTest methodsFor: 'tests' stamp: 'ivanpondal 11/23/2017 00:16'!testImportSupplierWithNewCustomer	| aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444'.	self importFrom: aSupplierInput.	anIdentification := PartyIdentification ofType: 'D' numbered: '123'.	aSupplier := system		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self assert: (aSupplier hasCustomer: self pepeSanchezCustomer)! !!SupplierImportTest methodsFor: 'tests' stamp: 'ivanpondal 11/23/2017 00:14'!testImportSupplierWithAddress	| aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123A,San Martin,3322,Olivos,1636,BsAs'.	self importFrom: aSupplierInput.	anIdentification := PartyIdentification ofType: 'D' numbered: '123'.	aSupplier := system		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self		assert: aSupplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'! !!SupplierImportTest methodsFor: 'tests' stamp: 'ivanpondal 11/23/2017 00:16'!testShouldNotImportSupplierWithANonExistingCustomer	| aSupplierInput |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123EC,D,200'.	self addExistingCustomerToSystem.	self should: [self importFrom: aSupplierInput]	raise: Error - MessageNotUnderstood	withExceptionDo: [ :anError | 		self assert: anError messageText equals: ExistingCustomerRecordImporter nonExistingCustomerErrorMessage ].	! !!SupplierImportTest methodsFor: 'tests' stamp: 'ivanpondal 11/23/2017 00:15'!testImportSupplierWithExistingCustomer	| aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123EC,D,5456774'.	self addExistingCustomerToSystem.	self importFrom: aSupplierInput.	anIdentification := PartyIdentification ofType: 'D' numbered: '123'.	aSupplier := system		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self assert: (aSupplier hasCustomer: self existingCustomer)! !!SupplierImportTest methodsFor: 'tests' stamp: 'ivanpondal 11/23/2017 00:14'!testImportSupplier	| aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream on: 'S,Supplier1,D,123'.	self importFrom: aSupplierInput.	self deny: system suppliersIsEmpty.	anIdentification := PartyIdentification ofType: 'D' numbered: '123'.	aSupplier := system		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self assert: aSupplier name equals: 'Supplier1'.	self assert: aSupplier identificationType equals: 'D'.	self assert: aSupplier identificationNumber equals: '123'! !!SupplierImportTest methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 22:22'!existingCustomer	| anIdentification |	anIdentification := PartyIdentification ofType: 'D' numbered: '5456774'.	^ Customer		withFirstName: 'Pepe'		withLastName: 'Sanchez'		identifiedAs: anIdentification! !!SupplierImportTest methodsFor: 'test - system' stamp: 'ivanpondal 11/22/2017 23:46'!addExistingCustomerToSystem	system addCustomer: self existingCustomer.! !!SupplierImportTest methodsFor: 'as yet unclassified ' stamp: 'BrianBokser 11/20/2017 22:22'!pepeSanchezCustomer	| anIdentification |	anIdentification := PartyIdentification ofType: 'D' numbered: '22333444'.	^ Customer		withFirstName: 'Pepe'		withLastName: 'Sanchez'		identifiedAs: anIdentification! !RecordImporter subclass: #SupplierRecordImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 20:40'!recordSize	^ 4.! !!SupplierRecordImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 22:22'!import: aRecord	| aName anIdentificationType anIdentificationNumber anIdentification aSupplier |		self assertValidRecordSize: aRecord.	aName := aRecord second.	anIdentificationType := aRecord third.	anIdentificationNumber := aRecord fourth.	anIdentification := PartyIdentification		ofType: anIdentificationType		numbered: anIdentificationNumber.		aSupplier := Supplier new		initializeWithName: aName		withIdentication: anIdentification.	system addSupplier: aSupplier.	^ aSupplier.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierRecordImporter class	instanceVariableNames: ''!!SupplierRecordImporter class methodsFor: 'testing' stamp: 'BrianBokser 11/20/2017 20:36'!canImportRecord: aRecord	^ aRecord first = 'S'.! !Object subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierSystem methodsFor: 'suppliers - private' stamp: 'BrianBokser 11/18/2017 23:04'!allSuppliers	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 16:50'!commitTransaction	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 16:50'!beginTransaction	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/18/2017 23:06'!suppliersIsEmpty	^ self allSuppliers isEmpty.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'CosmeFulanito 11/16/2017 20:22'!addSupplier: aSupplier	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'CosmeFulanito 11/16/2017 20:23'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNotOne: aNotOneBlock 	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'ivanpondal 11/22/2017 23:52'!stop	self subclassResponsibility.! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'session persistanceMapper'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentSupplierSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 23:01'!allSuppliers	^ session selectAllOfType: Supplier.! !!PersistentSupplierSystem methodsFor: 'adding' stamp: 'ivanpondal 11/23/2017 02:16'!addSupplier: aSupplier 	session persist: aSupplier! !!PersistentSupplierSystem methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 17:40'!supplierIdentifiedAs: anIdentification ifNotOne: aNotOneBlock	| suppliers  |	suppliers := session		select: [ :aSupplier | 			aSupplier isIdentifiedAs: anIdentification ]		ofType: Supplier.	suppliers size = 1		ifFalse: aNotOneBlock.	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!commitTransaction	session commit! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:55'!supplierMapping	^ persistanceMapper supplierMapping! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!start	session open! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:54'!addressMapping	^ persistanceMapper addressMapping. ! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/23/2017 13:54'!customerMapping	^ persistanceMapper customerMapping.! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/23/2017 02:17'!stop	session close! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/23/2017 01:56'!initializeSession	session :=			(DataBaseSession				for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping))! !!PersistentSupplierSystem methodsFor: 'initalize' stamp: 'BrianBokser 11/23/2017 13:54'!initializeWithPersistanceMapper: aPersistanceMapper 	persistanceMapper := aPersistanceMapper.	self initializeSession.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersistentSupplierSystem class	instanceVariableNames: ''!!PersistentSupplierSystem class methodsFor: 'creation' stamp: 'BrianBokser 11/23/2017 13:47'!withPersistanceMapper: aPersistanceMapper 	^ self new initializeWithPersistanceMapper: aPersistanceMapper.! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientCustomerSystem methodsFor: 'initialization' stamp: 'ip 11/13/2017 21:11'!initialize	super initialize.	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 20:37'!allCustomers	^ customers.! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/14/2017 19:12'!commitTransaction! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ip 11/13/2017 21:07'!beginTransaction! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ip 11/13/2017 21:07'!start! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'CosmeFulanito 11/16/2017 19:17'!addCustomer: aCustomer 	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/22/2017 23:52'!stop! !!TransientCustomerSystem methodsFor: 'accessing' stamp: 'BrianBokser 11/20/2017 19:03'!customers: anObject	customers := anObject! !!TransientCustomerSystem methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 19:08'!customerIdentifiedAs: anIdentification ifNotOne: aNotOneBlock	| identifiedCustomers |	identifiedCustomers := customers		select: [ :aCustomer | aCustomer isIdentifiedAs: anIdentification ].	identifiedCustomers size = 1		ifFalse: aNotOneBlock.	^ identifiedCustomers first! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientSupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 16:51'!initialize	suppliers := OrderedCollection new.! !!TransientSupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/18/2017 23:05'!allSuppliers	^ suppliers.! !!TransientSupplierSystem methodsFor: 'evaluating actions' stamp: 'BrianBokser 11/20/2017 17:33'!supplierIdentifiedAs: anIdentification ifNotOne: aNotOneBlock	| identifiedSuppliers |	identifiedSuppliers := suppliers		select: [ :aSupplier | 			aSupplier isIdentifiedAs: anIdentification ].	identifiedSuppliers size = 1		ifFalse: [ ^ aNotOneBlock value ].	^ identifiedSuppliers anyOne! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'BrianBokser 11/20/2017 16:51'!start! !!TransientSupplierSystem methodsFor: 'adding elements' stamp: 'CosmeFulanito 11/16/2017 20:17'!addSupplier: aSupplier 	suppliers add: aSupplier.! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:50'!commitTransaction	.! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:49'!beginTransaction! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/22/2017 23:52'!stop! !