Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'ivanpondal 11/14/2017 19:21'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'BrianBokser 11/18/2017 20:34'!assertImportedCustomersSizeIsCorrect	self assert: system customersSize equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'ivanpondal 11/14/2017 19:19'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self		customerIdentifiedAs: idType		numbered: idNumber.	self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2.	self		assert: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/16/2017 12:24'!setUp	system := Environment current newCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'ip 11/13/2017 21:06'!tearDown	system commitTransaction.	system stop! !!CustomerImportTest methodsFor: 'importing' stamp: 'ivanpondal 11/14/2017 19:09'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^ system customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNotOne: [ self fail ]! !!CustomerImportTest methodsFor: 'importing' stamp: 'ip 11/13/2017 21:10'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream on: system) import! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'ivanpondal 11/14/2017 18:51'!alwaysImportedCustomer	^ self		customerIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'testing' stamp: 'BrianBokser 11/18/2017 20:31'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'BrianBokser 11/18/2017 20:31'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'BrianBokser 11/18/2017 20:31'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'BrianBokser 11/18/2017 20:31'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/18/2017 20:20'!initializeOn: aReadStream on: aSystem	readStream := aReadStream.	system := aSystem.! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'BrianBokser 11/18/2017 22:31'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'BrianBokser 11/18/2017 22:31'!assertThereIsSupplierForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'BrianBokser 11/20/2017 18:27'!importCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer		withFirstName:			record second		withLastName:			record third		identifiedAs:			record fourth		numbered:			record fifth.	system addCustomer: newCustomer! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CustomerImporter methodsFor: 'importing' stamp: 'BrianBokser 11/9/2017 20:10'!parseRecord	record := line substrings: {$,}! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/9/2017 20:41'!recordStartsWithInvalidCharacterErrorMessage	^ 'Record starts with invalid character'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/18/2017 20:20'!from: aReadStream on: aSystem	^self new initializeOn: aReadStream on: aSystem! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 20:35'!allCustomers	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!commitTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!beginTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!start	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:29'!customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNotOne: aNotOneBlock	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'CosmeFulanito 11/16/2017 19:17'!addCustomer: aCustomer	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:28'!stop	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'BrianBokser 11/18/2017 20:35'!customersIsEmpty	^ self allCustomers isEmpty! !!CustomerSystem methodsFor: 'customers' stamp: 'BrianBokser 11/18/2017 20:35'!customersSize	^ self allCustomers size! !Object subclass: #ERPSystem	instanceVariableNames: 'customerSystem supplierSystem'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ERPSystem methodsFor: 'initialize' stamp: 'BrianBokser 11/20/2017 11:11'!initializeWith: aCustomerSystem with: aSupplierSystem 	customerSystem := aCustomerSystem.	supplierSystem := aSupplierSystem.! !!ERPSystem methodsFor: 'Suppliers' stamp: 'BrianBokser 11/20/2017 11:12'!addSupplier: aSupplier 	^ supplierSystem addSupplier: aSupplier.! !!ERPSystem methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 11:30'!addCustomer: aCustomer 	customerSystem addCustomer: aCustomer.! !!ERPSystem methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 11:35'!customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNotOne: aNotOneBlock 	^ customerSystem customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNotOne: aNotOneBlock.! !!ERPSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 17:00'!beginTransaction	customerSystem beginTransaction.	supplierSystem beginTransaction.! !!ERPSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:56'!start	customerSystem start.	supplierSystem start.! !!ERPSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 17:00'!suppliersIsEmpty	^ supplierSystem suppliersIsEmpty .! !!ERPSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/20/2017 17:00'!commitTransaction	customerSystem commitTransaction.	supplierSystem commitTransaction.! !!ERPSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/20/2017 17:00'!close	customerSystem close.	supplierSystem close.! !!ERPSystem methodsFor: 'suppliers' stamp: 'BrianBokser 11/20/2017 17:36'!supplierIdentifiedAs: anIdentification ifNotOne: aNotOneBlock 	^ supplierSystem supplierIdentifiedAs: anIdentification  ifNotOne: aNotOneBlock .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ERPSystem class	instanceVariableNames: ''!!ERPSystem class methodsFor: 'instance creation' stamp: 'BrianBokser 11/20/2017 11:08'!with: aCustomerSystem with: aSupplierSystem^ self new initializeWith: aCustomerSystem with: aSupplierSystem.! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Environment methodsFor: 'test - system' stamp: 'BrianBokser 11/20/2017 12:09'!newERPSystem	| anERPSystem |	anERPSystem := ERPSystem		with:			self newCustomerSystem		with:			self newSupplierSystem.	^ anERPSystem! !!Environment methodsFor: 'instance creation' stamp: 'BrianBokser 11/16/2017 12:03'!newCustomerSystem	self subclassResponsibility.! !!Environment methodsFor: 'system-create' stamp: 'BrianBokser 11/18/2017 22:51'!newSupplierSystem	self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'accessing' stamp: 'BrianBokser 11/16/2017 12:05'!current	| currentEnvironmentClass |	currentEnvironmentClass := Environment allSubclasses detect: [ :anEnvirommentClass | anEnvirommentClass isCurrent  ] ifNone: [ Error signal: 'No current Environment' ].	^ currentEnvironmentClass new.! !!Environment class methodsFor: 'accessing' stamp: 'BrianBokser 11/20/2017 16:09'!isCurrent	self subclassResponsibility.! !Environment subclass: #DevelopmentEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!DevelopmentEnviroment methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/16/2017 12:00'!newCustomerSystem	^ TransientCustomerSystem new.! !!DevelopmentEnviroment methodsFor: 'system-create' stamp: 'BrianBokser 11/18/2017 22:51'!newSupplierSystem	 ^ TransientSupplierSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnviroment class	instanceVariableNames: ''!!DevelopmentEnviroment class methodsFor: 'testing' stamp: 'BrianBokser 11/20/2017 16:36'!isCurrent	^ true.! !Object subclass: #Identification	instanceVariableNames: 'idNumber idType'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Identification methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 17:17'!initializeOfType: anIdentificationType numbered: anIdentificationNumber 	idType := anIdentificationType.	idNumber := anIdentificationNumber.! !!Identification methodsFor: 'comparing' stamp: 'BrianBokser 11/20/2017 17:18'!= anIdentification	idType = anIdentification idType  ifFalse: [ ^ false ].	idNumber = anIdentification idNumber  ifFalse: [ ^ false ].	^ true.! !!Identification methodsFor: 'comparing' stamp: 'BrianBokser 11/20/2017 17:19'!idType	^ idType! !!Identification methodsFor: 'comparing' stamp: 'BrianBokser 11/20/2017 17:19'!idNumber	^ idNumber! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Identification class	instanceVariableNames: ''!!Identification class methodsFor: 'creation' stamp: 'BrianBokser 11/20/2017 17:14'!ofType: anIdentificationType numbered: anIdentificationNumber 	^ self new initializeOfType: anIdentificationType numbered: anIdentificationNumber.! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!IntegrationEnvironment methodsFor: 'instance creation' stamp: 'BrianBokser 11/16/2017 12:04'!newCustomerSystem	^ PersistentCustomerSystem new.! !!IntegrationEnvironment methodsFor: 'instance creation' stamp: 'BrianBokser 11/18/2017 23:10'!newSupplierSystem	^ PersistentSupplierSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'BrianBokser 11/20/2017 16:36'!isCurrent	^ false.! !Object subclass: #Party	instanceVariableNames: 'id addresses identification'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Party methodsFor: 'address' stamp: 'BrianBokser 11/20/2017 18:41'!addressAt: aStreetName ifNone: noneClosure 	^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Party methodsFor: 'address' stamp: 'BrianBokser 11/20/2017 18:47'!addresses	^ addresses copy.! !!Party methodsFor: 'accesing' stamp: 'BrianBokser 11/20/2017 18:40'!identificationType	^ identification idType ! !!Party methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 18:40'!initialize	addresses := OrderedCollection new.! !!Party methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 18:40'!isIdentifiedAs: anIdentification	^ identification = anIdentification! !!Party methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 18:44'!addressesIsEmpty		^addresses isEmpty! !!Party methodsFor: 'addresses' stamp: 'BrianBokser 11/20/2017 18:44'!numberOfAddresses		^addresses size! !!Party methodsFor: 'addresses' stamp: 'BrianBokser 11/20/2017 18:41'!addAddress: anAddress 	addresses add: anAddress.! !!Party methodsFor: 'accessing' stamp: 'BrianBokser 11/20/2017 18:41'!identificationNumber	^ identification idNumber.! !Party subclass: #Customer	instanceVariableNames: 'firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'initialization' stamp: 'BrianBokser 11/20/2017 18:44'!initializeWithFirstName: aFirstName withLastName: aLastName identifiedAs: anIdentificationType numbered: anIdentificationNumber.	super initialize.	firstName := aFirstName.	lastName := aLastName.	identification := Identification ofType: anIdentificationType numbered: anIdentificationNumber. ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'BrianBokser 11/20/2017 18:50'!= aCustomer	(firstName = aCustomer firstName ) ifFalse: [ ^ false ].	(lastName = aCustomer lastName ) ifFalse: [ ^ false ].	(aCustomer isIdentifiedAs: identification ) ifFalse: [ ^ false ].	(addresses  = aCustomer addresses  ) ifFalse: [ ^ false ].	^ true. ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'importing - private - customer' stamp: 'BrianBokser 11/20/2017 18:25'!withFirstName: aFirstName withLastName: aLastName identifiedAs: anIdentificationType numbered: anIdentificationNumber	^ self new initializeWithFirstName: aFirstName withLastName: aLastName identifiedAs: anIdentificationType numbered: anIdentificationNumber.! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'CosmeFulanito 11/16/2017 19:17'!addCustomer: aCustomer 	session addCustomer: aCustomer! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:16'!commitTransaction	session commit! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:15'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:15'!start	session open! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ip 11/13/2017 20:30'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'Anonymous 11/13/2017 20:29'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:17'!stop	session close! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ivanpondal 11/14/2017 19:15'!initializeSession	session :=			(DataBaseSession				for: (Array with: self addressMapping with: self customerMapping))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'ip 11/13/2017 21:04'!initialize	super initialize.	self initializeSession.! !!PersistentCustomerSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 20:35'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'ivanpondal 11/14/2017 19:16'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNotOne: aNotOneBlock	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	(customers size = 1) ifFalse: aNotOneBlock.	^ customers anyOne! !Party subclass: #Supplier	instanceVariableNames: 'name customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'initialize' stamp: 'BrianBokser 11/20/2017 18:42'!initializeWithName: aName withIdentication: anIdentification	super initialize.	name := aName.	identification := anIdentification.	customers := OrderedCollection new.! !!Supplier methodsFor: 'evaluating' stamp: 'CosmeFulanito 11/16/2017 20:39'!name	^ name! !!Supplier methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 11:35'!addCustomer: aCustomer 	customers add: aCustomer.! !!Supplier methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 12:25'!hasCustomer: aCustomer 	customers detect: [ :aSupplierCustomer | aSupplierCustomer = aCustomer ] 	ifNone: [^ false ].	^ true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Supplier class	instanceVariableNames: ''!!Supplier class methodsFor: 'initialize' stamp: 'BrianBokser 11/20/2017 17:26'!withName: aName withIdenticationType: anIdentificationType withIdentificationNumber: anIdentificationNumber 	| anIdentification |	anIdentification := Identification ofType: anIdentificationType  numbered: anIdentificationNumber. 	^ self new initializeWithName: aName withIdentication: anIdentification.! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImportTest methodsFor: 'test - system' stamp: 'BrianBokser 11/20/2017 17:04'!addExistingCustomerToSystem	erpSystem addCustomer: self existingCustomer.! !!SupplierImportTest methodsFor: 'as yet unclassified ' stamp: 'BrianBokser 11/20/2017 18:33'!pepeSanchezCustomer	^ Customer withFirstName: 'Pepe'	withLastName: 'Sanchez'	identifiedAs: 'D'	numbered: '22333444'.! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/18/2017 22:39'!assert: aSupplier hasAddressAt: aStreetName number: aStreetNumber in: aTown zipCode: aZipCode province: aProvince	| aSupplierAddress |		aSupplierAddress := aSupplier addressAt: aStreetName ifNone: [ self fail ].	self assert: aSupplierAddress streetName equals: aStreetName.	self assert: aSupplierAddress streetNumber equals: aStreetNumber.	self assert: aSupplierAddress town equals: aTown.	self assert: aSupplierAddress zipCode equals: aZipCode.	self assert: aSupplierAddress province equals: aProvince.	! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/20/2017 17:04'!test04	| aSupplierImporter aSupplierInput |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123EC,D,200'.	self addExistingCustomerToSystem.	aSupplierImporter := SupplierImporter		from: aSupplierInput		on: erpSystem.			self should: [aSupplierImporter import]	raise: Error - MessageNotUnderstood	withExceptionDo: [ :anError | 		self assert: anError messageText equals: SupplierImporter nonExistingCustomerErrorMessage ].	! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/20/2017 17:37'!test02	| aSupplierImporter aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123A,San Martin,3322,Olivos,1636,BsAs'.	aSupplierImporter := SupplierImporter		from: aSupplierInput		on: erpSystem.	aSupplierImporter import.	anIdentification := Identification ofType: 'D' numbered: '123'.	aSupplier := erpSystem		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self		assert: aSupplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/20/2017 17:04'!tearDown	erpSystem commitTransaction.	erpSystem close.! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/20/2017 17:37'!test03	| aSupplierImporter aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123EC,D,5456774'.	self addExistingCustomerToSystem.	aSupplierImporter := SupplierImporter		from: aSupplierInput		on: erpSystem.	aSupplierImporter import.	anIdentification := Identification ofType: 'D' numbered: '123'.	aSupplier := erpSystem		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self assert: (aSupplier hasCustomer: self existingCustomer)! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/20/2017 17:36'!test01	| aSupplierImporter aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream on: 'S,Supplier1,D,123'.	aSupplierImporter := SupplierImporter		from: aSupplierInput		on: erpSystem.	aSupplierImporter import.	self deny: erpSystem suppliersIsEmpty.	anIdentification := Identification ofType: 'D' numbered: '123'.	aSupplier := erpSystem		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self assert: aSupplier name equals: 'Supplier1'.	self assert: aSupplier identificationType equals: 'D'.	self assert: aSupplier identificationNumber equals: '123'! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/20/2017 17:04'!setUp	erpSystem := Environment current newERPSystem.	erpSystem start.	erpSystem beginTransaction.! !!SupplierImportTest methodsFor: 'tests' stamp: 'BrianBokser 11/20/2017 17:38'!test05	| aSupplierImporter aSupplierInput aSupplier anIdentification |	aSupplierInput := ReadStream		on:			'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444'.	aSupplierImporter := SupplierImporter		from: aSupplierInput		on: erpSystem.	aSupplierImporter import.	anIdentification := Identification ofType: 'D' numbered: '123'.	aSupplier := erpSystem		supplierIdentifiedAs: anIdentification		ifNotOne: [ self fail ].	self assert: (aSupplier hasCustomer: self pepeSanchezCustomer)! !!SupplierImportTest methodsFor: 'customers' stamp: 'BrianBokser 11/20/2017 18:33'!existingCustomer	^ Customer withFirstName: 'Pepe'	withLastName: 'Sanchez'	identifiedAs: 'D'	numbered: '5456774'.! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream session record newCustomer newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImporter methodsFor: 'initialization' stamp: 'BrianBokser 11/18/2017 20:17'!initializeOn: aReadStream on: aSupplierSystem	readStream := aReadStream.	session := aSupplierSystem.! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'CosmeFulanito 11/16/2017 20:03'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'BrianBokser 11/20/2017 16:04'!importAddress	| newAddress |	self assertThereIsSupplierForRecord.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'BrianBokser 11/20/2017 16:01'!assertThereIsSupplierForRecord	newSupplier isNil ifTrue: [ self signalNoSupplierForRecordError ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'CosmeFulanito 11/16/2017 20:03'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 18:35'!importNewCustomerRecord	self assertValidCustomerRecordSize.	self assertThereIsSupplierForRecord.		newCustomer := Customer 		withFirstName: record second 		withLastName: record third 		identifiedAs: record fourth 		numbered: record fifth.		session addCustomer: newCustomer.	newSupplier addCustomer: newCustomer.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'CosmeFulanito 11/16/2017 20:09'!assertValidSupplierRecordSize		! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'CosmeFulanito 11/16/2017 20:05'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'CosmeFulanito 11/16/2017 20:03'!isCustomerRecord	^ record first = 'C'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'BrianBokser 11/20/2017 17:27'!importSupplier	| anIdentification anIdentificationNumber anIdentificationType aName |	self assertValidSupplierRecordSize.	aName := record second.	anIdentificationType := record third.	anIdentificationNumber := record fourth.	anIdentification := Identification		ofType: anIdentificationType		numbered: anIdentificationNumber.	newSupplier := Supplier new		initializeWithName: aName		withIdentication: anIdentification.	session addSupplier: newSupplier! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'CosmeFulanito 11/16/2017 20:03'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing' stamp: 'CosmeFulanito 11/16/2017 20:03'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 12:00'!signalNonExisingCustomer 	^ Error signal: self class nonExistingCustomerErrorMessage.! !!SupplierImporter methodsFor: 'importing' stamp: 'CosmeFulanito 11/16/2017 20:03'!parseRecord	record := line substrings: {$,}! !!SupplierImporter methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 16:02'!importExistingCustomer	| anExistingCustomer |	self assertThereIsSupplierForRecord.		anExistingCustomer := session customerIdentifiedAs: record second numbered: record third ifNotOne: [ self signalNonExisingCustomer ].	newSupplier addCustomer: anExistingCustomer.! !!SupplierImporter methodsFor: 'as yet unclassified ' stamp: 'BrianBokser 11/20/2017 12:35'!isNewCustomerRecord	^ record first = 'NC'.! !!SupplierImporter methodsFor: 'testing' stamp: 'BrianBokser 11/20/2017 11:17'!isExistingCustomerRecord	^ record first = 'EC'.! !!SupplierImporter methodsFor: 'importing - private' stamp: 'CosmeFulanito 11/16/2017 20:03'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'BrianBokser 11/20/2017 12:35'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isAddressRecord ifTrue: [  ^self importAddress ].	self isExistingCustomerRecord ifTrue: [ ^ self importExistingCustomer ].	self isNewCustomerRecord ifTrue: [ ^ self importNewCustomerRecord ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private' stamp: 'CosmeFulanito 11/16/2017 20:03'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private' stamp: 'CosmeFulanito 11/16/2017 20:03'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'error signal' stamp: 'CosmeFulanito 11/16/2017 20:03'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'BrianBokser 11/20/2017 16:03'!signalNoSupplierForRecordError	self error: self class noSupplierForRecordErrorErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'CosmeFulanito 11/16/2017 20:03'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'CosmeFulanito 11/16/2017 20:03'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'error messages' stamp: 'BrianBokser 11/20/2017 12:02'!nonExistingCustomerErrorMessage	^ 'Non existing customer'.! !!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:04'!noSupplierForRecordErrorDescription	^'There is no Customer for the dependent record'! !!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'CosmeFulanito 11/16/2017 20:03'!recordStartsWithInvalidCharacterErrorMessage	^ 'Record starts with invalid character'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'BrianBokser 11/18/2017 20:18'!from: aReadStream on: aSupplierSystem	^self new initializeOn: aReadStream on: aSupplierSystem! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'CosmeFulanito 11/16/2017 20:03'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'CosmeFulanito 11/16/2017 20:03'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'CosmeFulanito 11/16/2017 20:03'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'CosmeFulanito 11/16/2017 20:03'!invalidAddressRecordErrorDescription		^'Invalid address record'! !Object subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 16:50'!commitTransaction	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 16:50'!close	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/18/2017 23:06'!suppliersIsEmpty	^ self allSuppliers isEmpty.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'CosmeFulanito 11/16/2017 20:22'!addSupplier: aSupplier	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'CosmeFulanito 11/16/2017 20:23'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNotOne: aNotOneBlock 	self subclassResponsibility.! !!SupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 16:50'!beginTransaction	self subclassResponsibility.! !!SupplierSystem methodsFor: 'suppliers - private' stamp: 'BrianBokser 11/18/2017 23:04'!allSuppliers	self subclassResponsibility.! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!commitTransaction	session commit! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 23:14'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!start	session open! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!stop	session close! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 22:54'!initialize	super initialize.	self initializeSession.! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'BrianBokser 11/18/2017 23:26'!initializeSession	session :=			(DataBaseSession				for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping))! !!PersistentSupplierSystem methodsFor: 'importing' stamp: 'BrianBokser 11/20/2017 17:40'!supplierIdentifiedAs: anIdentification ifNotOne: aNotOneBlock	| suppliers  |	suppliers := session		select: [ :aSupplier | 			aSupplier isIdentifiedAs: anIdentification ]		ofType: Supplier.	suppliers size = 1		ifFalse: aNotOneBlock.	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 23:01'!allSuppliers	^ session selectAllOfType: Supplier.! !!PersistentSupplierSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/18/2017 23:01'!addSupplier: aSupplier 	session addSupplier: aSupplier! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientCustomerSystem methodsFor: 'initialization' stamp: 'ip 11/13/2017 21:11'!initialize	super initialize.	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/14/2017 19:12'!commitTransaction! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ip 11/13/2017 21:07'!beginTransaction! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 17:01'!close! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ip 11/13/2017 21:07'!start! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'CosmeFulanito 11/16/2017 19:17'!addCustomer: aCustomer 	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ivanpondal 11/14/2017 19:13'!stop! !!TransientCustomerSystem methodsFor: 'customers - private' stamp: 'BrianBokser 11/18/2017 20:37'!allCustomers	^ customers.! !!TransientCustomerSystem methodsFor: 'importing' stamp: 'ivanpondal 11/14/2017 19:08'!customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNotOne: aNotOneBlock 	| identifiedCustomers |	identifiedCustomers := customers		select: [ :aCustomer | 			aCustomer identificationType = anIdentificationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ].	(identifiedCustomers size = 1) ifFalse: aNotOneBlock.	^ identifiedCustomers first! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientSupplierSystem methodsFor: 'accessing' stamp: 'BrianBokser 11/20/2017 16:51'!start! !!TransientSupplierSystem methodsFor: 'evaluating actions' stamp: 'BrianBokser 11/20/2017 17:33'!supplierIdentifiedAs: anIdentification ifNotOne: aNotOneBlock	| identifiedSuppliers |	identifiedSuppliers := suppliers		select: [ :aSupplier | 			aSupplier isIdentifiedAs: anIdentification ].	identifiedSuppliers size = 1		ifFalse: [ ^ aNotOneBlock value ].	^ identifiedSuppliers anyOne! !!TransientSupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/20/2017 16:51'!initialize	suppliers := OrderedCollection new.! !!TransientSupplierSystem methodsFor: 'evaluating' stamp: 'BrianBokser 11/18/2017 23:05'!allSuppliers	^ suppliers.! !!TransientSupplierSystem methodsFor: 'adding elements' stamp: 'CosmeFulanito 11/16/2017 20:17'!addSupplier: aSupplier 	suppliers add: aSupplier.! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:50'!commitTransaction	.! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:49'!beginTransaction! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'BrianBokser 11/20/2017 16:49'!close! !